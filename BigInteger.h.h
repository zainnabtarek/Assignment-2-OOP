
/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 **********************************************************************************************************************************************************************
/*
//                0       0          0              0000000   0000000       0 00000 0                   0                                             0         0       //
//                 0     0          0  0            0         0             0       0                   0                                             0       0        //
//                  0   0          0    0           0         0             0       0                   0                                             0     0          //
//                    0           0      0          0         0             0  000000                   0                                             0   0            //
//                    0          0    0   0         000000    0000000       0   0                       0000000     00000000          000000000       0 0              //
//                    0         0          0        0                0      0     0                     0     0     0      0          0               0 0              //
//                    0        0            0       0                0      0       0                   0     0     0      0          0               0   0            //
//                    0       0              0      0                0      0         0                 0     0     0      0          0               0    0           //
//                    0      0                0     0000000   00000000      0          0                0000000     000000000000      000000000       0      00        //




*************************************************************************************************************************************************************************
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


*/
/*
 ───────────▄▄▄▄▄▄▄▄▄▄▄▄▄
 ────────▄▀▀─────────────▀▀▄
 ───────█───────────────────█
 ──────█─────────────────────█
 ─────█───▄▄▄▄▄▄▄───▄▄▄▄▄▄▄───█
 ────█───█████████─█████████───█
 ────█──██▀────▀█████▀────▀██──█
 ───██████───█▀█─███───█▀█─██████
 ───██████───▀▀▀─███───▀▀▀─██████
 ────█──▀█▄────▄██─██▄────▄█▀──█
 ────█────▀█████▀───▀█████▀────█
 ────█───────────────▄▄▄───────█
 ────█───────▄▄▄▄██▀▀█▀▀█▄─────█
 ────█─────▄██▄█▄▄█▄▄█▄▄██▄────█
 ────█─────▀▀█████████████▀────█
 ───▐▓▓▌─────────────────────▐▓▓▌
 ───▐▐▓▓▌▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▐▓▓▌▌
 ───█══▐▓▄▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄▓▌══█
 ──█══▌═▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▌═▐══█
 ──█══█═▐▓▓▓▓▓▓▄▄▄▄▄▄▄▓▓▓▓▓▓▌═█══█
 ──█══█═▐▓▓▓▓▓▓▐██▀██▌▓▓▓▓▓▓▌═█══█
 ──█══█═▐▓▓▓▓▓▓▓▀▀▀▀▀▓▓▓▓▓▓▓▌═█══█

 ──█───█─█──█─█▀▀█─▀▀█▀▀─▀█─█─▀█──
 ──█▄█▄█─█▀▀█─█▄▄█───█───█▀─▀─█▀──
 ───▀─▀──▀──▀─▀──▀───▀───▄──▄─▄───



░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░████████░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█████████░░░░░░░░░░░░░░░░░▌░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░◐◐◐█████████▀▀▀▀▀▀🔥░░░░░░░░███
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█████████░░░░░░░░░░░░░░░░░░░░▌░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█████████░░░░░░░░░░░░░░░░░░░░█▌░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▄▄▀█████████████████████████████████████████████████
░░░░░░░░░░░░░░░░░░░░░░░░░░▄▄▄████▄████████ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ████
░░░░░░░░░░░░░░░░░░░░░░░░░░░▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█████████▀▀▀▀▀▀▀▀▀
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█████████░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░◐◐◐█████████▀▀▀▀▀▀🔥░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█████████░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█████████░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░████████░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███████░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██████░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█████░░░░░░░░░░░░░░░

/*
[#]=============================================================[#]
		 ___    ____              ____          ___ _
		|_ _|  / ___|__ _ _ __   |  _ \  ___   |_ _| |_
		 | |  | |   / _` | '_ \  | | | |/ _ \   | || __|
		 | |  | |__| (_| | | | | | |_| | (_) |  | || |_
		|___|  \____\__,_|_| |_| |____/ \___/  |___|\__|
					 it's just about time

[#]=============================================================[#]
*/







#include <cstdio>
#include <iomanip>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <math.h>
#include <algorithm>
#include <deque>
#include <string>
#include <chrono>
#include <thread>
#include <queue>
#include <list>
#include<unordered_set>
#include<cmath>
using namespace std;
long long b[10000];
int prim(int x) {

    int i, k = 0;
    for (i = 1; i <= x; i++)
    {
        if (x % i == 0)k++;
    }
    if (k != 2)return -1;

    else return x;
}
long long gcdd(long long a, long long  b) {
    if (a == 0 || b == 0)return abs(a - b);
    long long  res = a % b;
    while (res) {
        a = b;
        b = res;
        res = a % b;
    }
    return b;
}
long long  fact(long long  n)
{
    if (n <= 1)
        return 1;
    else
        return n * fact(n - 1);

}
void swap(int* a, int* b) {
    int t = *a;
    *a = *b;
    *b = t;
}
int swwap(int a[], int first, int last) {
    int ll = a[last];
    int i = first - 1;
    for(int j=first ;j<=last-1;j++){
        if (a[j] < ll)
        {
            i++; swap(&a[i], &a[j]);
        }

    }
    swap(&a[i + 1], &a[last]);
    return( i + 1);

}
void quiqsort(int a[], int  first, int last) {
    int pa;
    if (first < last) {
        pa = swwap(a, first, last);
        quiqsort(a, first, pa - 1);

        quiqsort(a, pa+1, last );
    }



}
void print(int a[], int x) {
    int i;
    for (i = 0; i < x; i++) {
        cout << a[i] << " ";
    }
}
void selectionsort(int a[], int x) {
    int i, j, miin=a[0];
    for (i = 0; i < x - 1; i++) {
        for (j = i; j < x ; j++) {
            if (a[j] < a[i]) { swap(&a[i], &a[j]); }

        }
    }
}









void sortString(string& str)
{

    sort(str.begin(), str.end());

}


struct node
{
    int data;
    node* next;

};

long long  a[100000];
set<int>k1;
//long long ab[100000];
//pair<long long ,long long >aa[100000];
//long long bb[100000];

//vector<long long >bb;
int main() {

    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int tttt = 1;//cin >> tttt;

    while (tttt--)
    {
        long long  x, y, z, c = 0, v = 0, n = 0, m, mm, l = 0, i = 0, j = 2, k = 0, sum = 0;
        string xx, yy, zz, kk, ll, cc;
        cin >> x >> y >> z;
        i = 1;
        while (z--) {
            sum+= x * i;
            i++;
        }
        if (sum <= y)cout << 0;
        else 	cout << sum - y;
    }

    return 0;
}